#include <Arduino.h>
#include <WiFi.h>
#include <WiFiClient.h>
#include <WiFiAP.h>
#include <WiFiMulti.h>
#include <WebSocketsServer.h>
#include <HTTPClient.h>
#include <iostream>
#include <ArduinoJson.hpp>
#include <ArduinoJson.h>
#include <Wire.h> 
#include <Adafruit_GFX.h>      //libreria OLED
#include <Adafruit_SSD1306.h>  //libreria OLED 
#include <TinyGPS++.h>
#include <Preferences.h>
TinyGPSPlus gps;
// PARAMETROS
String ruta = "34A";
String unidad = "48";
String ramal = "HEROES";
String terid = "0071005252";

// RED A INTERNET
const char* ssid = "TP-Link_6C72";
const char* password = "16823099";
//const char* ssid = "RED ACCESA";
//const char* password = "037E32E7";

const char *ssid_local = "RED-ESP32-01";
const char *password_local = "1234567890";

const char* server_api = "http://74.208.233.208:3001/api/v1/esp32/";

WebSocketsServer webSocket = WebSocketsServer(81);
//
WiFiMulti WiFiMulti;
WiFiServer server(80);

/*
 *     DEFINE
 */
#define SCREEN_WIDTH 128  //define tama√±o de display
#define SCREEN_HEIGHT 64 
#define RXD1 4
#define TXD1 2

#define RXD2 16
#define TXD2 17
/*
     VARIABLES GLOBALES
*/
boolean statusWifi = false;
String hora_servidor = "ERROR";
String msm_ws = "ERROR";
String msm_res_api = "ERROR";
String mensaje_status = "ERROR";
String status_servidor = "ERROR";
String status_gps = "ERROR";
double longitud = -98.2037;
double latitud = 19.03392;
boolean boolean_SERVER = false;

float Latitude , Longitude;
int year , month , date, hour , minute , second;
String DateString , TimeString , LatitudeString , LongitudeString;
//
// instancia de eeprom
Preferences preferences;

//  OBJETOS
class ClassGPS {       // The class
  public:             // Access specifier
    String latitud;        
    String longitud;
    int anio;
    int mes;
    int dia;
    int hora;
    int minuto;
    int segundo;
};
           // Access specifier
String latitud_sim2 []={"19.033876066372855", "19.033876066372855", "19.033876066372855", "19.033876066372855", "19.033876066372855", "19.034119480115020",  "19.034119480115020",  "19.034119480115020",  "19.034119480115020",  "19.034119480115020",  "19.034281755747838", "19.034281755747838", "19.034281755747838", "19.034281755747838", "19.034281755747838", "19.034281755747838", "19.034281755747838", "19.034487135620360",  "19.034487135620360",  "19.034487135620360",  "19.034487135620360",  "19.034487135620360",  "19.034565737723740",  "19.034565737723740",   "19.034565737723740",  "19.034565737723740",  "19.034565737723740",  "19.034695050780623", "19.034695050780623", "19.034695050780623", "19.034695050780623", "19.034695050780623", "19.034910572319248", "19.034910572319248", "19.034910572319248", "19.034910572319248", "19.034910572319248", "19.035194553214744", "19.035133700209663", "19.035039885112504", "19.034895359048292", "19.034697586335568", "19.034509955585330",  "19.034342609070755", "19.033980024369830",  "19.033799999502740",  "19.033663079051290",  "19.033300492869895", "19.033117931697983", "19.033003830858643", "19.032882123215614", "19.032664063459480",  "19.032494179496540",  "19.032260905719905", "19.032466288090028", "19.032775229296753", "19.032937273295495", "19.033274153726240",  "19.033540672571124", "19.033807190985403", "19.033926591097796"
};

String longitud_sim2[]{"-98.20367032097322","-98.20367032097322","-98.20367032097322","-98.20367032097322","-98.20367032097322","-98.20415311859433","-98.20415311859433","-98.20415311859433","-98.20415311859433","-98.20415311859433","-98.20447498367665","-98.20447498367665","-98.20447498367665","-98.20447498367665","-98.20447498367665","-98.20447498367665","-98.20447498367665","-98.20446693705192","-98.20446693705192","-98.20446693705192","-98.20446693705192","-98.20446693705192","-98.20441329287192","-98.20441329287192","-98.20441329287192","-98.20441329287192","-98.20441329287192","-98.20435160206492","-98.20435160206492","-98.20435160206492","-98.20435160206492","-98.20435160206492","-98.20418530510685","-98.20418530510685","-98.20418530510685","-98.20418530510685","-98.20418530510685","-98.20406192349245","-98.20384466456096","-98.20366495655796","-98.20341014670296","-98.20301317977098","-98.20268326805704","-98.20230239437906","-98.20166671084174","-98.20132338808716","-98.20100420521413","-98.20026123331763","-98.19991522835663","-98.19997155474567","-98.20006543206065","-98.20022368239260","-98.20035779284362","-98.20049994992061","-98.20098811196172","-98.20153061085021","-98.20180126604517","-98.20252075776605","-98.20302372533457","-98.20351992652108","-98.20373870613632"
};

String latitud_sim []={"19.033876066372850","19.034119480115020","19.034281755747830","19.034487135620360","19.034565737723740","19.034695050780623","19.034910572319248","19.035194553214744","19.035133700209663","19.035039885112504","19.034895359048292","19.034697586335568","19.034509955585330","19.034342609070755","19.033980024369830","19.033799999502740","19.033663079051290","19.033300492869895","19.033117931697983","19.033003830858643","19.032882123215614","19.032664063459400","19.032494179496540","19.032260905719905","19.032466288090028","19.032775229296753","19.032937273295495","19.033274153726240","19.033540672571124","19.033807190985403","19.033926591097796"};

String longitud_sim []= {"-98.20367032097322","-98.20415311859433","-98.20447498367665","-98.20446693705192","-98.20441329287192","-98.20435160206492","-98.20418530510685","-98.20406192349245","-98.20384466456096","-98.20366495655796","-98.20341014670296","-98.20301317977098","-98.20268326805704","-98.20230239437906","-98.20166671084174","-98.20132338808716","-98.20100420521413","-98.20026123331763","-98.19991522835663","-98.19997155474567","-98.20006543206065","-98.20022368239260","-98.20035779284362","-98.20049994992061","-98.20098811196172","-98.20153061085021","-98.20180126604517","-98.20252075776605","-98.20302372533457","-98.20351992652108","-98.20373870613632"};


ClassGPS gps_neo;

int gps_status = 0;
// VARIABLES DE HORARIOS
int TimeZoneHour = -5 ;  // needs to be a pin-to-ground adjustment for DST

/*
 * FREE_RTOS
*/
//use only core 1 for demo purpouses
#if CONFIG_FREERTOS_UNICORE
static const BaseType_t app_cpu = 0;
#else
static const BaseType_t app_cpu = 1;
#endif



/////////////////////// LOGO //////////////////
const unsigned char PROGMEM logo [] = {
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0x07, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0xFB, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFA, 0x65, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0xFA, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7, 0xFD, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEB, 0xFF, 0x7F,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xD7, 0x9E, 0xBF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xCE, 0x07, 0x3F,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFB, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF9, 0xFD, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF9, 0xFD, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF3, 0xFC, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7, 0xFE, 0x7F,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xF7, 0x0F, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xF7, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0xFB, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB, 0xFD, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB, 0xFD, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x9F, 0xFF,
0xFE, 0x0F, 0xFC, 0x00, 0x01, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x03, 0xFF, 0x0F, 0xFF,
0xFE, 0x0F, 0xF8, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x03, 0xFE, 0x07, 0xFF,
0xFC, 0x07, 0xF8, 0x00, 0x01, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x03, 0xFE, 0x07, 0xFF,
0xFC, 0x07, 0xF0, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x03, 0xFC, 0x03, 0xFF,
0xF8, 0x47, 0xF1, 0xFF, 0xFF, 0x8F, 0xFF, 0xFF, 0xFF, 0xFF, 0xE3, 0xFF, 0xFF, 0xFC, 0x63, 0xFF,
0xF8, 0xE3, 0xF1, 0xFF, 0xFF, 0x8F, 0xFF, 0xFF, 0xFF, 0xFF, 0xE3, 0xFF, 0xFF, 0xF8, 0x61, 0xFF,
0xF0, 0xE3, 0xE3, 0xFF, 0xFF, 0x9F, 0xFF, 0xFE, 0x00, 0x00, 0xE3, 0x00, 0x0F, 0xF8, 0xF1, 0xFF,
0xF1, 0xE1, 0xE3, 0xFF, 0xFF, 0x1F, 0xFF, 0xFC, 0x00, 0x00, 0x70, 0x00, 0x03, 0xF8, 0xF1, 0xFF,
0xF1, 0xF1, 0xE3, 0xFF, 0xFF, 0x1F, 0xFF, 0xFC, 0x00, 0x00, 0x70, 0x00, 0x03, 0xF1, 0xF8, 0xFF,
0xE3, 0xF0, 0xE3, 0xFF, 0xFF, 0x1F, 0xFF, 0xFC, 0x00, 0x00, 0x70, 0x00, 0x01, 0xF1, 0xF8, 0xFF,
0xE3, 0xB8, 0xE3, 0xFF, 0xFF, 0x1F, 0xFF, 0xFC, 0x00, 0x00, 0xF8, 0x00, 0x01, 0xE1, 0xF8, 0x7F,
0xC7, 0x18, 0x73, 0xFF, 0xFF, 0x9F, 0xFF, 0xFC, 0x7F, 0xFF, 0xFF, 0xFF, 0xF1, 0xE3, 0x9C, 0x7F,
0xC7, 0x1C, 0x71, 0xFF, 0xFF, 0x8F, 0xFF, 0xFC, 0x7F, 0xFF, 0xFF, 0xFF, 0xF1, 0xC3, 0x9C, 0x3F,
0x87, 0x1C, 0x70, 0x00, 0x03, 0x80, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x01, 0xC7, 0x9E, 0x3F,
0x8F, 0x1E, 0x30, 0x00, 0x01, 0x80, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x01, 0x87, 0x9E, 0x1F,
0x8F, 0xBE, 0x38, 0x00, 0x01, 0xC0, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x03, 0x8F, 0xFF, 0x1F,
0x9F, 0xFF, 0x3C, 0x00, 0x01, 0xE0, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x03, 0xCF, 0xFF, 0x3F,
0xDF, 0xFF, 0x7E, 0x00, 0x03, 0xF0, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xDF, 0xFF, 0xBF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xF3, 0xFF, 0xFD, 0xFF, 0x9F, 0xFA, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0xFF, 0xFD, 0xFF, 0x9E, 0xFA, 0xFF, 0xFB, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xEF, 0x37, 0x77, 0xB3, 0x96, 0x4B, 0xDC, 0xD9, 0x33, 0xFF, 0xFF, 0xFF,
0x80, 0x00, 0x00, 0x01, 0xEE, 0x22, 0x25, 0x11, 0x82, 0x02, 0x88, 0x08, 0x03, 0xFF, 0xFF, 0xFF,
0x00, 0x00, 0x00, 0x01, 0xE0, 0xC8, 0xAD, 0x47, 0x88, 0xA2, 0x2A, 0x22, 0x8F, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xEE, 0x59, 0x8C, 0xE3, 0x8C, 0x8A, 0x60, 0xB2, 0xA3, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xEF, 0x19, 0x8C, 0xE9, 0x8C, 0x92, 0x61, 0x32, 0x5B, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0x88, 0x8D, 0x4D, 0x8C, 0xB2, 0x23, 0x32, 0xD9, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xF0, 0x02, 0x01, 0x11, 0x8C, 0x0A, 0x80, 0xB1, 0x03, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x57, 0x7F, 0xB7, 0xFF, 0xFF, 0xE7, 0xFF, 0xF7, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0xEF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xDF, 0xFF, 0xFF, 0xFF, 0xFF, 0x8F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// 'autobus', 15x15px
const unsigned char logo_autobus [] PROGMEM = {
  0xe0, 0x0e, 0xcf, 0xc6, 0x8f, 0xc6, 0x9f, 0xf2, 0x9f, 0xf2, 0x9f, 0xf2, 0x9f, 0xf2, 0x9f, 0xf2, 
  0x80, 0x02, 0x80, 0x02, 0x88, 0x22, 0x98, 0x32, 0x80, 0x02, 0xc7, 0xe6, 0xef, 0xe6
};
// 'broadcast', 15x15px
const unsigned char logo_broadcast [] PROGMEM = {
  0xff, 0xfe, 0xff, 0xfe, 0xf1, 0xfe, 0xf1, 0xbe, 0xf9, 0x1e, 0xfe, 0x1e, 0xe0, 0x1e, 0xc0, 0x2e, 
  0xd8, 0xc6, 0xfc, 0x46, 0xfe, 0x66, 0xfc, 0x7e, 0xfc, 0xfe, 0xff, 0xfe, 0xff, 0xfe
};
// 'location', 15x15px
const unsigned char logo_location [] PROGMEM = {
  0xff, 0xfe, 0xf8, 0x3e, 0xf0, 0x1e, 0xe0, 0x0e, 0xe1, 0x0e, 0xc3, 0x86, 0xe3, 0x8e, 0xe0, 0x0e, 
  0xe0, 0x0e, 0xf0, 0x1e, 0xf0, 0x1e, 0xf8, 0x3e, 0xf8, 0x3e, 0xfc, 0x7e, 0xff, 0xfe
};
// 'no-gps', 15x15px
const unsigned char logo_no_gps [] PROGMEM = {
  0xf8, 0x38, 0xf0, 0x30, 0xe7, 0xe2, 0xcc, 0xc6, 0xd9, 0x86, 0xdb, 0x16, 0xde, 0x36, 0xdc, 0x36, 
  0xd8, 0x66, 0xf1, 0xce, 0xe3, 0xce, 0xc3, 0x9e, 0x89, 0x3e, 0x1c, 0x7e, 0x3e, 0xfe
};
// 'no-signal', 15x15px
const unsigned char logo_no_signal [] PROGMEM = {
  0x7f, 0xfe, 0xbc, 0x7e, 0xd8, 0x0e, 0x8f, 0xf2, 0x37, 0xf8, 0xf3, 0x1e, 0xe1, 0xce, 0xde, 0xf6, 
  0xfc, 0x7e, 0xf9, 0x3e, 0xff, 0xde, 0xff, 0xee, 0xfe, 0xf6, 0xfe, 0xfa, 0xff, 0xfc
};
// 'signal', 15x15px
const unsigned char logo_signal [] PROGMEM = {
  0xff, 0x8e, 0xff, 0xe6, 0xff, 0xb2, 0xff, 0x88, 0xff, 0xec, 0xc3, 0xa4, 0x99, 0xfe, 0x24, 0xfe, 
  0x42, 0xfe, 0x4e, 0xfe, 0x2c, 0xfe, 0xbd, 0xfe, 0xd9, 0xfe, 0xc3, 0xfe, 0xe7, 0xfe
};
// 'wifi', 15x15px
const unsigned char logo_wifi [] PROGMEM = {
  0xff, 0xfe, 0xfe, 0xfe, 0xe3, 0x8e, 0xdf, 0xf6, 0x30, 0x18, 0x6f, 0xec, 0x18, 0x30, 0xe7, 0xce, 
  0xec, 0x6e, 0xe3, 0x8e, 0xfc, 0x7e, 0xfd, 0x7e, 0xfd, 0x7e, 0xff, 0xfe, 0xff, 0xfe
};
// 'wire', 15x15px
const unsigned char logo_wire [] PROGMEM = {
  0xf8, 0x3e, 0xe3, 0x8e, 0xcf, 0xe6, 0x9f, 0xf2, 0xbd, 0x7a, 0x3d, 0x78, 0x70, 0x1c, 0x73, 0x9c, 
  0x7b, 0xbc, 0x3b, 0xb8, 0xb8, 0x3a, 0x9c, 0x72, 0xde, 0xe6, 0xfe, 0xce, 0xfe, 0x1e
};
// 'bus-station', 15x15px
const unsigned char logo_bus_station [] PROGMEM = {
  0xff, 0xfe, 0xff, 0xfe, 0x98, 0x06, 0x88, 0x02, 0xdb, 0xfa, 0xdb, 0xfa, 0xdb, 0xfa, 0xdb, 0xfa, 
  0xd8, 0x02, 0xd8, 0x02, 0xd8, 0x02, 0xd8, 0x06, 0xdc, 0xc6, 0xff, 0xfe, 0xff, 0xfe
};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 432)
const int logo_allArray_LEN = 9;
const unsigned char* logo_allArray[9] = {
  logo_autobus,
  logo_broadcast,
  logo_bus_station,
  logo_location,
  logo_no_gps,
  logo_no_signal,
  logo_signal,
  logo_wifi,
  logo_wire
};


// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 192)

///////////////////////////////////////////////////////////////


Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1); //
/*
 * ********************************************************************
                 Setup
 * ********************************************************************
*/
void setup() {
  // Setup basico
  Serial.begin(115200);
  Serial1.begin(9600, SERIAL_8N1, RXD1, TXD1);// serial1 pines 4 y 2
  Serial2.begin(115200, SERIAL_8N1, RXD2, TXD2);// serial2 pines 16 y 17
  delay(50);
  Serial.println("");
  Serial.println("");
  Serial.println("");
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);

  // LECTURA DE VARIABLES
  preferences.begin("my-app", false);
  lectura_eeprom();
  preferences.end();
  
//  wifi_local();
//  setupWiFi();
//  Serial.println("Longitud: " + String(longitud));
//  Serial.println("Latitud: " + String(latitud));

  

  //task to run forever
  xTaskCreatePinnedToCore(
            toggleLED,        //Funcion a llamar
            "Toggle LED",     //Nombre de la tarea
            2048,             //Bytes de memoria que puede usar la tarea
            NULL,             //Apuntador de memoria (no se usa)
            1,                //Prioridad de la tarea (de 0 a 24, siendo 24 la mayor prioridad)
            NULL,             //Apuntador de tarea
            app_cpu);         //Nucleo o procesador que vamos a usar  
  //
//  xTaskCreate(
//                    taskTwo,          /* Task function. */
//                    "TaskTwo",        /* String with name of task. */
//                    2048,            /* Stack size in bytes. */
//                    NULL,             /* Parameter passed as input of the task */
//                    1,                /* Priority of the task. */
//                    NULL
//                    );            /* Task handle. */
 //////////////////////////

  //// DISPLAY OLED
  display.clearDisplay();
  //display.setTextColor(WHITE);
  display.setCursor(0,0);
  display.setTextSize(1);
  display.drawBitmap(0,0, logo, 128, 64,BLACK, WHITE);
  display.display();
//  delay(1000);
//  display.clearDisplay();            
}


/*
 * ********************************************************************
              Programa principal
 * ********************************************************************
*/

void loop() {
  gps_serial();
  wifi_local();
  Serial.println("Iniciando PRIMER NUCLEO");
  Serial.setDebugOutput(true);
  webSocket.begin();
  
  Serial.println("Servidor webSocketEvent iniciado");
  delay(2000);
  gps_status = 0;
  displayTiempo();
  int unSegundo = 0; 
  while(1){
    //
    WiFiClient client = server.available();
    webSocket.onEvent(webSocketEvent);
    webSocket.loop(); 

    gps_serial();
    
    //
    delay(1);
    unSegundo ++;
    if((unSegundo >= 1000) && (gps_status == 0)){
      displayTiempo();
      jsonGPS_ruta();
      unSegundo = 0;
    } else if(unSegundo >= 100000){
      displayTiempo();
      unSegundo = 0;
      gps_status = 0;
    }
    
//    
  }
}


/*
 **************************************************************************************** 
 *            SEGUNDO NUCLEO
 ****************************************************************************************  
*/

//
void toggleLED(void *parameter){
  delay(3000);
  Serial.println("Iniciando SEGUNDO NUCLEO");
//  gps_serial();
  statusWifi = false;
//  gps_serial();
  setupWiFi();
  statusWifi = true;
  unsigned long previousMillis = 0;
  unsigned long interval = 30000;
  
  while(1){
    
      unsigned long currentMillis = millis();

      if ((WiFi.status() != WL_CONNECTED) ) {
        statusWifi = false;

        Serial.println("..................Reconnecting to WiFi..................");
        WiFi.disconnect();
        while ((WiFi.status() != WL_CONNECTED) ) {
          setupWiFi();
        }
//        WiFi.reconnect();
//        delay(1000);
////        gps_serial();

        
      }
      statusWifi = true;
//      gps_serial();
      delay(1000);
      
  }
}



/*
 **************************************************************************************** 
 *            TERCER NUCLEO
 ****************************************************************************************  
*/
//
//void taskTwo(void * parameter)
//{
//    delay(500);
//    Serial.println("Iniciando TERCER NUCLEO");
//    delay(500);
//    gps_status = 0;
//    displayTiempo();
//    while(1){
//      displayTiempo();
//      
//      gps_serial();
//      Serial.println("$$$$$$$$$$$$$$$$$$ Ejecutando TERCER NUCLEO $$$$$$$$$$$$$$$$$$");
//      delay(1000);
//    }
//}
